// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = function(robot) {
    var Group, GroupAliases, Groups, Server, Servers, baseUrl, groupAliases, http, papertrailGroups, papertrailServers;
    baseUrl = "https://papertrailapp.com/api/v1/";
    http = function(path) {
      return robot.http("" + baseUrl + path).headers({
        "X-Papertrail-Token": process.env.HUBOT_PAPERTRAIL_API_TOKEN
      });
    };
    GroupAliases = (function() {
      function GroupAliases() {
        var base;
        this.aliases = (base = robot.brain.data).papertrailGroupAliases != null ? base.papertrailGroupAliases : base.papertrailGroupAliases = {};
      }

      GroupAliases.prototype["for"] = function(id) {
        var base;
        return (base = this.aliases)[id] || (base[id] = []);
      };

      GroupAliases.prototype.set = function(id, list) {
        if (list) {
          this.aliases[id] = list;
        } else {
          delete this.aliases[id];
        }
        return robot.brain.save();
      };

      return GroupAliases;

    })();
    groupAliases = new GroupAliases;
    Group = (function() {
      function Group(data) {
        this.data = data;
      }

      Group.prototype.id = function() {
        return this.data.id;
      };

      Group.prototype.name = function() {
        return this.data.name;
      };

      Group.prototype.searchUrl = function() {
        return this.data._links.search;
      };

      Group.prototype.systemCount = function() {
        return this.data.systems.length;
      };

      Group.prototype.description = function() {
        if (this.aliases().length > 0) {
          return (this.name()) + " (" + (this.aliases().join(", ")) + ")";
        } else {
          return this.name();
        }
      };

      Group.prototype.aliases = function() {
        return groupAliases["for"](this.id());
      };

      Group.prototype.setAliases = function(list) {
        return groupAliases.set(this.id(), list);
      };

      Group.prototype.hasAlias = function(value) {
        var alias, i, len, ref;
        value = value.toLowerCase();
        ref = this.aliases();
        for (i = 0, len = ref.length; i < len; i++) {
          alias = ref[i];
          if (alias === value) {
            return true;
          }
        }
        return false;
      };

      Group.prototype.addAlias = function(value) {
        value = value.toLowerCase();
        return this.aliases().push(value);
      };

      Group.prototype.removeAlias = function(value) {
        var alias, i, len, newAliases, ref;
        value = value.toLowerCase();
        ref = this.aliases();
        for (i = 0, len = ref.length; i < len; i++) {
          alias = ref[i];
          if (alias !== value) {
            newAliases = alias;
          }
        }
        return this.setAliases(newAliases);
      };

      return Group;

    })();
    Groups = (function() {
      function Groups() {
        this.groups = [];
        this.fetch(function() {
          return robot.logger.info("Papertrail groups loaded");
        });
      }

      Groups.prototype.findById = function(id) {
        var group, i, len, ref;
        ref = this.groups;
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          if (group.id() === id) {
            return group;
          }
        }
      };

      Groups.prototype.findByExactName = function(name) {
        var group, i, len, ref;
        name = name.toLowerCase();
        ref = this.groups;
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          if (group.name().toLowerCase() === name) {
            return group;
          }
        }
      };

      Groups.prototype.findByAlias = function(alias) {
        var group, i, len, ref;
        alias = alias.toLowerCase();
        ref = this.groups;
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          if (group.hasAlias(alias)) {
            return group;
          }
        }
      };

      Groups.prototype.findByFuzzyName = function(name) {
        var group, i, len, ref;
        name = name.toLowerCase();
        ref = this.groups;
        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          if (group.name().toLowerCase().indexOf(name) !== -1) {
            return group;
          }
        }
      };

      Groups.prototype.find = function(value, callback, dontFetch) {
        var group;
        group = null;
        if (group == null) {
          group = this.findById(value);
        }
        if (group == null) {
          group = this.findByExactName(value);
        }
        if (group == null) {
          group = this.findByAlias(value);
        }
        if (group == null) {
          group = this.findByFuzzyName(value);
        }
        if (group) {
          callback(group);
          return;
        }
        if (dontFetch) {
          return callback();
        } else {
          return this.fetch((function(_this) {
            return function() {
              return _this.find(value, callback, true);
            };
          })(this));
        }
      };

      Groups.prototype.fetch = function(callback) {
        return http("groups.json").get()((function(_this) {
          return function(err, res, body) {
            var group, response;
            if (res.statusCode !== 200) {
              robot.logger.warning("Error talking to Papertrail");
              robot.logger.warning(body);
            } else {
              response = JSON.parse(body);
              _this.groups = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = response.length; i < len; i++) {
                  group = response[i];
                  results.push(new Group(group));
                }
                return results;
              })();
            }
            if (callback) {
              return callback(_this.groups);
            }
          };
        })(this));
      };

      return Groups;

    })();
    Server = (function() {
      function Server(data) {
        this.data = data;
      }

      Server.prototype.id = function() {
        return this.data.id;
      };

      Server.prototype.name = function() {
        return this.data.name;
      };

      return Server;

    })();
    Servers = (function() {
      function Servers() {
        this.servers = [];
        this.fetch(function() {
          return robot.logger.info("Papertrail servers loaded");
        });
      }

      Servers.prototype.findById = function(id) {
        var i, len, ref, server;
        ref = this.servers;
        for (i = 0, len = ref.length; i < len; i++) {
          server = ref[i];
          if (server.id() === id) {
            return server;
          }
        }
      };

      Servers.prototype.findByExactName = function(name) {
        var i, len, ref, server;
        name = name.toLowerCase();
        ref = this.servers;
        for (i = 0, len = ref.length; i < len; i++) {
          server = ref[i];
          if (server.name().toLowerCase() === name) {
            return server;
          }
        }
      };

      Servers.prototype.findByFuzzyName = function(name) {
        var i, len, ref, server;
        name = name.toLowerCase();
        ref = this.servers;
        for (i = 0, len = ref.length; i < len; i++) {
          server = ref[i];
          if (server.name().toLowerCase().indexOf(name) !== -1) {
            return server;
          }
        }
      };

      Servers.prototype.find = function(value, callback, dontFetch) {
        var server;
        server = null;
        if (server == null) {
          server = this.findById(value);
        }
        if (server == null) {
          server = this.findByExactName(value);
        }
        if (server == null) {
          server = this.findByFuzzyName(value);
        }
        if (server != null) {
          callback(server);
          return;
        }
        if (dontFetch) {
          return callback();
        } else {
          return this.fetch((function(_this) {
            return function() {
              return _this.find(value, callback, true);
            };
          })(this));
        }
      };

      Servers.prototype.fetch = function(callback) {
        return http("systems.json").get()((function(_this) {
          return function(err, res, body) {
            var response, server;
            if (res.statusCode !== 200) {
              robot.logger.warning("Error talking to Papertrail");
              robot.logger.warning(body);
            } else {
              response = JSON.parse(body);
              _this.servers = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = response.length; i < len; i++) {
                  server = response[i];
                  results.push(new Server(server));
                }
                return results;
              })();
            }
            if (callback) {
              return callback(_this.servers);
            }
          };
        })(this));
      };

      return Servers;

    })();
    papertrailGroups = new Groups;
    papertrailServers = new Servers;
    robot.respond(/(?:log|papertrail) me(?: group=(?:"([^"]+)"|(\S+)))?(?: (?:server|host|system|source)=(\S+))?(?: (.*))?$/, function(msg) {
      var fetchResults, groupName, query, serverName;
      fetchResults = function(queryOptions) {
        var htmlUrl;
        if (queryOptions.group_id != null) {
          htmlUrl = "https://papertrailapp.com/groups/" + queryOptions.group_id + "/events";
        } else if (queryOptions.system_id != null) {
          htmlUrl = "https://papertrailapp.com/systems/" + queryOptions.system_id + "/events";
        } else {
          htmlUrl = "https://papertrailapp.com/events";
        }
        if (queryOptions.q != null) {
          htmlUrl += "?q=" + (escape(queryOptions.q));
        }
        return http("events/search.json").query(queryOptions).get()(function(err, res, body) {
          var event, events, matchText, response;
          if (res.statusCode !== 200) {
            msg.send("Error talking to papertrail:");
            return msg.send(body);
          } else {
            response = JSON.parse(body);
            events = (function() {
              var i, len, ref, results;
              ref = response.events;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                event = ref[i];
                results.push(event.display_received_at + " " + event.source_name + " " + event.program + ": " + event.message);
              }
              return results;
            })();
            if (events.length === 0) {
              return msg.send("\"" + (queryOptions.q || "") + "\": No matches were found in time. Search harder at: " + htmlUrl);
            } else {
              matchText = events.length === 1 ? "match" : "matches";
              msg.send("\"" + (queryOptions.q || "") + "\" found " + events.length + " " + matchText + " – " + htmlUrl);
              return msg.send(events.join("\n") + "\n");
            }
          }
        });
      };
      groupName = msg.match[1] || msg.match[2];
      serverName = msg.match[3];
      query = msg.match[4];
      if (groupName != null) {
        return papertrailGroups.find(groupName, function(group) {
          if (group != null) {
            return fetchResults({
              q: query,
              group_id: group.id()
            });
          } else {
            return msg.send("Could not find group \"" + groupName + "\". Use \"/papertrail groups\" for possible options");
          }
        });
      } else if (serverName != null) {
        return papertrailServers.find(serverName, function(server) {
          if (server != null) {
            return fetchResults({
              q: query,
              system_id: server.id()
            });
          } else {
            return msg.send("Could not find server \"" + serverName + "\". Use \"/papertrail servers\" for possible options");
          }
        });
      } else {
        return fetchResults({
          q: query
        });
      }
    });
    robot.respond(/papertrail (refresh )?groups$/, function(msg) {
      var printDescription;
      printDescription = function(groups) {
        var group, groupDescriptions;
        groupDescriptions = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = groups.length; i < len; i++) {
            group = groups[i];
            results.push(group.description());
          }
          return results;
        })();
        msg.send("Papertrail groups:");
        return msg.send(groupDescriptions.join("\n") + "\n");
      };
      if (msg.match[1]) {
        return papertrailGroups.fetch(printDescription);
      } else {
        return printDescription(papertrailGroups.groups);
      }
    });
    robot.respond(/papertrail (refresh )?(?:servers|sources|hosts|systems)$/, function(msg) {
      var printDescription;
      printDescription = function(servers) {
        var server, serverDescriptions;
        serverDescriptions = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = servers.length; i < len; i++) {
            server = servers[i];
            results.push(server.name());
          }
          return results;
        })();
        msg.send("Papertrail servers:");
        return msg.send(serverDescriptions.join("\n") + "\n");
      };
      if (msg.match[1]) {
        return papertrailServers.fetch(printDescription);
      } else {
        return printDescription(papertrailServers.servers);
      }
    });
    robot.respond(/papertrail alias group +(.*) +to (\S+)/, function(msg) {
      var alias, groupName;
      groupName = msg.match[1];
      alias = msg.match[2];
      return papertrailGroups.find(groupName, function(group) {
        if (group != null) {
          group.addAlias(alias);
          return msg.send("Added an alias of \"" + alias + "\" for \"" + groupName + "\"");
        } else {
          return msg.send("Could not find group " + groupName);
        }
      });
    });
    robot.respond(/papertrail (?:remove|delete) alias (\S+) from group +(.*)/, function(msg) {
      var alias, groupName;
      groupName = msg.match[2];
      alias = msg.match[1];
      return papertrailGroups.find(groupName, function(group) {
        if (group != null) {
          group.removeAlias(alias);
          return msg.send("Removed an alias of \"" + alias + "\" from \"" + groupName + "\"");
        } else {
          return msg.send("Could not find group " + groupName);
        }
      });
    });
    robot.respond(/papertrail group (.*)/, function(msg) {
      var groupName;
      groupName = msg.match[1];
      return papertrailGroups.find(groupName, function(group) {
        if (group != null) {
          msg.send("" + (group.description()));
          return msg.send("Systems: " + (group.systemCount()) + "\n");
        } else {
          return msg.send("Could not find group " + groupName);
        }
      });
    });
    return robot.respond(/papertrail (?:server|source|host|system) (.*)/, function(msg) {
      var serverName;
      serverName = msg.match[1];
      return papertrailServers.find(serverName, function(server) {
        if (server != null) {
          return msg.send("" + (server.name()));
        } else {
          return msg.send("Could not find server " + serverName);
        }
      });
    });
  };

}).call(this);
